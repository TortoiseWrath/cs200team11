In the Bill ChocAn for Services sequence diagram, I used these methods:

Bill for Services Controller:
	Constructor requires provider number
	void setMember(string memberNumber) //sets the member number
	void serviceCorrect(bool correct) //apply "service correct" status indicated by provider to current bill
	private string getStatusMessage(Member member) //returns the message to display on the provider terminal based on status of member
	private string getServiceValidationMessage(Service service) //returns the message to display to the provider to verify the service is correct
	ProvidedServiceRecord generateProvidedServiceRecord(string serviceDate, string providerNumber, string memberNumber, string serviceCode, string Comments, int Fee) //fee in cents

Provider Terminal:
	string requestServiceDate() //asks the provider for the service date in format MM-DD-YYYY and returns their input
	string requestServiceCode() //asks the provider for the service code (6 digits) and returns their input
	bool requestServiceCorrect() //asks the provider to verify that the service displayed in the previous message is correct and returns their input
	string requestComments() //asks the provider for comments and returns the comments
	bool displayStatusMessage(string message) //displays the message to the provider and returns TRUE once user acknowledges
	bool displayServiceValidationMessage(string message) //displays the message to the provider - if service is valid, asks for Y/N input to verify correct service (name given in message) - returns TRUE once user acknowledges
	bool displayServiceFee (int fee) //displays the service fee (given in cents) - returns TRUE once user acknowledges

void resetTerminal() //resets the state of the terminal
	ChocAn Data Center:
	Member getMember(string memberNumber) //gets the member with member number memberNumber; returns null member if number invalid
	Service getService(string serviceCode) //gets the service with service code serviceCode; returns null service if service code invalid

Record on Disk:
	void writeRecordToDisk(ProvidedServiceRecord record) //constructor? writes a provided service record to disk
